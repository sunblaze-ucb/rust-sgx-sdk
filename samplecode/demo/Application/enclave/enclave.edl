/*
 * Copyright (C) 2017-2018 Baidu, Inc. All Rights Reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Baidu, Inc., nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
 
enclave {

    from "sgx_tkey_exchange.edl" import *;

    include "sgx_key_exchange.h"
    include "sgx_trts.h"
    from "sgx_tstd.edl" import *;
    from "sgx_stdio.edl" import *;
    from "sgx_backtrace.edl" import *;
    from "sgx_tstdc.edl" import *;

    trusted {
        public sgx_status_t enclave_init_ra(int b_pse, [out] sgx_ra_context_t *p_context);

        public sgx_status_t enclave_ra_close(sgx_ra_context_t context);

        public sgx_status_t verify_att_result_mac(sgx_ra_context_t context,
													[in,size=message_size] uint8_t* message,
													size_t message_size,
													[in,size=mac_size] uint8_t* mac,
													size_t mac_size);

        public sgx_status_t verify_secret_data(sgx_ra_context_t context,
												[in,size=secret_size] uint8_t* p_secret,
												uint32_t secret_size,
												[in,count=16] uint8_t* gcm_mac,
												uint32_t max_verification_length,
												[out, count=16] uint8_t *p_ret);

        /* ECALL functions of machine learning primitives. */
        public sgx_status_t add_normal_noise(double std_dev,
                                             [in, out, size=len, count=8] uint8_t* gradient,
                                             size_t len,
                                             [in] uint8_t key[16],
                                             [in] uint8_t iv[12],
                                             [in, out] uint8_t gradient_mac[16]);

        public sgx_status_t compute_grad([in, size=params_len, count=8] const uint8_t* params,
                                         size_t params_len,
                                         [in, size=inputs_len, count=8] const uint8_t* inputs,
                                         size_t inputs_len,
                                         [in, size=targets_len, count=8] const uint8_t* targets,
                                         size_t targets_len,
                                         [out, size=params_len, count=8] uint8_t* gradient,
                                         [in] uint8_t key[16],
                                         [in] uint8_t iv[12],
                                         [in] uint8_t model_mac[16],
                                         [in] uint8_t inputs_mac[16],
                                         [in] uint8_t targets_mac[16],
                                         [out] uint8_t gradient_mac[16]); 

        public sgx_status_t update_model([in, out, size=model_len, count=8] uint8_t* model,
                                         [in, size=model_len, count=8] const uint8_t* gradient,
                                         size_t model_len,
                                         double alpha,
                                         [in] uint8_t key[16],
                                         [in] uint8_t iv[12],
                                         [in, out] uint8_t model_mac[16],
                                         [in] uint8_t gradient_mac[16]);

        public sgx_status_t sgx_predict([in, size=model_len, count=8] const double* model,
                                    size_t model_len,
                                    [in, size=samples_len, count=8] const double* samples,
                                    size_t samples_len,
                                    [out, size=prediction_len, count=8] double* prediction,
                                    size_t prediction_len);

        /* crypto functions */
        public sgx_status_t calc_sha256([in, size=len] const uint8_t* input_str,
                                        size_t len,
                                        [out] uint8_t hash[32]);

        public sgx_status_t aes_gcm_128_encrypt([in] uint8_t key[16],
                                                [in, size=len] const uint8_t* plaintext,
                                                size_t len,
                                                [in] uint8_t iv[12],
                                                [out, size=len] uint8_t* ciphertext,
                                                [out] uint8_t mac[16]);

        public sgx_status_t aes_gcm_128_decrypt([in] uint8_t key[16],
                                                [in, size=len] const uint8_t* ciphertext,
                                                size_t len,
                                                [in] uint8_t iv[12],
                                                [in] uint8_t mac[16],
                                                [out, size=len] uint8_t* plaintext);

        public sgx_status_t aes_cmac([in, size=len] const uint8_t* text,
                                     size_t len,
                                     [in] uint8_t key[16],
                                     [out] uint8_t cmac[16]);

        public sgx_status_t rsa_key([in, size=len] const uint8_t* text, size_t len);
    };

};

